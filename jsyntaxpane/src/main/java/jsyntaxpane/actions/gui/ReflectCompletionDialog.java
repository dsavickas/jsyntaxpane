/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jsyntaxpane.actions.gui;

import java.awt.Font;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.JTextComponent;
import jsyntaxpane.util.ReflectUtils;

/**
 *
 * @author Ayman Al-Sairafi
 */
public class ReflectCompletionDialog extends javax.swing.JDialog {

    /**
     * The result returned to the caller
     */
    private String result = null;
    /**
     * The current filter, to avoid refiltering the items
     */
    public String escapeChars = ";(= \t\n";
    public List<? extends Member> items;

    /**
     * Creates new form ReflectCompletionDialog
     * @param parent
     */
    public ReflectCompletionDialog(Window parent) {
        super(parent, ModalityType.APPLICATION_MODAL);
        initComponents();
        jTxtItem.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                refilterList();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                refilterList();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                refilterList();
            }
        });
        // This will allow the textfield to receive TAB keys
        jTxtItem.setFocusTraversalKeysEnabled(false);
    }

    public void setFonts(Font font) {
        jTxtItem.setFont(font);
        jLstItems.setFont(font);
        doLayout();
    }

    public void setText(String abbrev) {
        jTxtItem.setText(abbrev);
    }

    public void setCompletionFor(String name) {
        lblCompletionsFor.setText(name);
    }

    private void refilterList() {
        String prefix = jTxtItem.getText();
        Vector<Member> filtered = new Vector<Member>();
        Object selected = jLstItems.getSelectedValue();
        for (Member m : items) {
            if (m.getName().startsWith(prefix)) {
                filtered.add(m);
            }
        }
        jLstItems.setListData(filtered);
        if (selected != null) {
            jLstItems.setSelectedValue(selected, true);
        } else {
            jLstItems.setSelectedIndex(0);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTxtItem = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLstItems = new javax.swing.JList();
        lblCompletionsFor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("CompletionDialog"); // NOI18N
        setResizable(false);
        setUndecorated(true);

        jTxtItem.setBorder(null);
        jTxtItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtItemKeyPressed(evt);
            }
        });

        jLstItems.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jLstItems.setCellRenderer(new IntelliListRenderer());
        jLstItems.setFocusable(false);
        jScrollPane1.setViewportView(jLstItems);

        lblCompletionsFor.setText("Class Name");
        lblCompletionsFor.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTxtItem, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
            .addComponent(lblCompletionsFor, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTxtItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(lblCompletionsFor))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTxtItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtItemKeyPressed

        int i = jLstItems.getSelectedIndex();
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ESCAPE:
                result = jTxtItem.getText();
                setVisible(false);
                return;
            case KeyEvent.VK_DOWN:
                if (i < jLstItems.getModel().getSize() - 1) {
                    i++;
                }
                jLstItems.setSelectedIndex(i);
                jLstItems.ensureIndexIsVisible(i);
                break;
            case KeyEvent.VK_UP:
                if (i > 0) {
                    i--;
                }
                jLstItems.setSelectedIndex(i);
                jLstItems.ensureIndexIsVisible(i);
                break;
        }

        if (escapeChars.indexOf(evt.getKeyChar()) >= 0) {
            if (jLstItems.getSelectedIndex() >= 0) {
                Object selected = jLstItems.getSelectedValue();
                if (selected instanceof Method) {
                    result = ReflectUtils.getJavaCallString((Method) selected);
                } else if (selected instanceof Constructor) {
                    result = ReflectUtils.getJavaCallString((Constructor) selected);
                } else if (selected instanceof Field) {
                    result = ((Field)selected).getName();
                } else {
                    result = selected.toString();
                }
            } else {
                result = jTxtItem.getText();
            }
            char pressed = evt.getKeyChar();
            // we need to just accept ENTER, and replace the tab with a single
            // space
            if (pressed != '\n') {
                result += (pressed == '\t') ? ' ' : pressed;
            }
            setVisible(false);
        }
    }//GEN-LAST:event_jTxtItemKeyPressed

    /**
     * Gets the selected text shown on the dialog.
     * @return the selected text, or empty string if nothing is selected
     */
    public String getResult() {
        return result == null ? "" : result;
    }

    /**
     * Set the items to display
     * @param items
     */
    public void setItems(List<? extends Member> items) {
        this.items = items;
    }

    /**
     * Display the dialog for the given text component
     * @param target
     * @param initialText
     */
    public void displayFor(JTextComponent target, String initialText) {
        try {
            int dot = target.getCaretPosition();
            Window window = SwingUtilities.getWindowAncestor(target);
            Rectangle rt = target.modelToView(dot);
            Point loc = new Point(rt.x, rt.y);
            // convert the location from Text Componet coordinates to
            // Frame coordinates...
            loc = SwingUtilities.convertPoint(target, loc, window);
            // and then to Screen coordinates
            SwingUtilities.convertPointToScreen(loc, window);
            setLocationRelativeTo(window);
            setLocation(loc);
        } catch (BadLocationException ex) {
            Logger.getLogger(ReflectCompletionDialog.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            setFonts(target.getFont());
            setText(initialText);
            refilterList();
            setVisible(true);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jLstItems;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTxtItem;
    private javax.swing.JLabel lblCompletionsFor;
    // End of variables declaration//GEN-END:variables

}
